TT/**
 * Copyright JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const connection = require('./connection');
const http = require('@jetbrains/youtrack-scripting-api/http');
const dateTime = require('@jetbrains/youtrack-scripting-api/date-time');
// eslint-disable-next-line no-unused-vars
const Agreement = require('./agreement');

const DATE_TIME_FORMAT = 'yyyy-MM-dd\'T\'HH:mm:ss\'Z\'';
const UTC = 'UTC0';
const SEARCH_DELAY = 2 * 60_000;

const ZendeskCommon = function (context) {

  const common = {};
  const ignoredTicketFields = ['Subject', 'Description'];

  const zendeskStaffGroup = {
    id: 'Zendesk Staff',
    name: 'Zendesk Staff'
  };

  const api = connection.newHttp(context);

  let currentProject = 0;

  const users = {};
  const forms = {};

  let roleTypes = {};

  const ZD_USER_ROLES = {
    ADMIN: 'admin',
    AGENT: 'agent',
    END_USER: 'end-user'
  };
  const YT_USER_TYPES = {
    AGENT: 'AGENT',
    STANDARD_USER: 'STANDARD_USER',
    REPORTER: 'REPORTER'
  };
  let customFields = [];
  const typeMapping = {
    checkbox: 'string',
    text: 'string',
    group: 'UserGroup',
    textarea: 'string',
    integer: 'integer',
    date: 'date',
    decimal: 'float'
  };

  const getTimestampFormats = () => {
    return [DATE_TIME_FORMAT, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSX', 'yyyy-MM-dd'];
  };

  const fieldName = (field, defaultFieldName) => {
    if (field.title === 'Status') {
      return defaultFieldName;
    }
    return field.title;
  };

  const getUserType = (user) => {
    if (user.role === ZD_USER_ROLES.END_USER) {
      return YT_USER_TYPES.REPORTER;
    }
    return roleTypes[user.role_type] ? YT_USER_TYPES.AGENT : YT_USER_TYPES.STANDARD_USER;
  };

  /**
     * @param {Agreement} agreement
     * @param id user id
     * @return user resolved user
     */
  const getUser = (agreement, id) => {
    if (agreement.predefinedUserLogin) {
      return {
        email: agreement.predefinedUserEmail,
        name: agreement.predefinedUserLogin,
        type: 'user'
      };
    }
    const stringId = id + '';
    if (users[stringId]) {
      return users[stringId];
    }
    const user = api.GET(`/users/${stringId}.json`).user;
    const convertedUser = {
      id: user.id,
      login: user.email,
      email: user.email,
      name: user.name,
      fullName: user.name,
      type: 'user',
      userType: getUserType(user)
    };
    users[stringId] = convertedUser;
    return convertedUser;
  };

  const getCustomFields = () => {
    if (customFields && customFields.length) {
      return customFields;
    }
    const allCustomFields = api.GET('/ticket_fields').ticket_fields;
    customFields = allCustomFields.filter((it) => !it.system_field_options); // let's filter our system fields
    return customFields;
  };

  const convertValue = function (type, value) {
    if (!value) {
      return null;
    }
    if (type === 'checkbox') {
      return value.toString();
    }
    return value;
  };

  const getRoleTypes = () => {
    const customRoles = api.GET('/custom_roles.json').custom_roles;
    return customRoles.reduce((acc, role) => {
      acc[role.role_type] = role.configuration.ticket_comment_access === 'public';
      return acc;
    },{});
  };

  const prepareToImport = () => {
    console.log('Preparing to fetching Zendesk... ( ͡❛ ͜ʖ ͡❛)');
    roleTypes = getRoleTypes();
  };

  const getServerInfo = () => {
    const response = api.getSync('/users/me.json');
    const headers = {};

    response.headers.forEach(header => {
      headers[header.name.toLowerCase()] = header.value;
    });

    const versionHeader = headers['x-zendesk-application-version'];

    const isoDateTime = new Date(headers['date']).toISOString();

    return {
      version: versionHeader,
      time: isoDateTime
    };
  };

  const getBrands = () => {
    return api.GET('/brands.json').brands.map(brand => {
      return {
        id: brand.id,
        key: brand.name,
        name: brand.name,
        teamGroups: [zendeskStaffGroup]
      };
    });
  };

  const getAttachmentContent = (project, issue, attachment) => {
    try {
      return new http.Connection(attachment.contentUrl).getSync();
    } catch (e) {
      console.log(`Failed to download attachment ${attachment.contentUrl} ${attachment.fileName} :( `, e.message);
    }
  };

  // requesting additional info as general issues endpoint doesn't provide required info
  const withComments = (ticket) => {
    ticket.comments = api.GET(`/tickets/${ticket.id}/comments.json`).comments;
    return ticket;
  };

  /**
   *
   * @param {Agreement} agreement
   * @param ticketOrComment
   * @return attachment converter
   */
  const zendeskAttachmentsConverter = (agreement, ticketOrComment) => {
    return (attachment) => {
      const author = getUser(agreement, ticketOrComment.author_id);
      return {
        id: attachment.id + '',
        created: ticketOrComment.created_at,
        filename: attachment.file_name,
        mimeType: attachment.content_type,
        contentUrl: attachment.content_url,
        author: author,
        charset: 'UTF-8'
      };
    };
  };

  const getFileNameFromUrl = (url) => {
    const paramName = '?name=';
    return url.substring(url.indexOf(paramName) + paramName.length);
  };

  const appendIndex = (fileName, i) => {
    const extensionRegexp = /\.[0-9a-z]+$/i;
    const delimiterIndex = fileName.search(extensionRegexp);
    return `${fileName.slice(0, delimiterIndex)}-${i}${fileName.substring(delimiterIndex)}`;
  };

  const findFileNameDuplicates = attachments => {
    const seen = new Set();
    const duplicates = new Set();

    attachments.forEach(({file_name: fileName}) => {
      if (seen.has(fileName)) {
        duplicates.add(fileName);
      } else {
        seen.add(fileName);
      }
    });

    return duplicates;
  };

  function insertLinksIntoMarkdown(markdown, html) {
    let counter = 0
    let result = markdown

    try {
      const linkRegex = /<a\b[^>]*href="(.*?)".*?>(.*?)<\/a>/g;
      let match;
      while (counter < 15 && (match = linkRegex.exec(html)) !== null) {
        counter++
        const href = match[1];
        const text = match[2];
        const markdownLink = `[${text}](${href})`;
        result = result.replace(new RegExp(`\\b${text}\\b`, 'g'), markdownLink);
      }
      if (counter >= 15) {
        console.warn("Couldn't insert links into markdown. Max number of iterations reached");
        return markdown;
      }
      return result
    } catch (e) {
      console.warn("Couldn't insert links into markdown.", e);
    }

    return markdown;
  }

  const processImageAttachments = (containerId, text, htmlText, existingAttachments) => {
    const regex = /!\[([^\]]*)\]\(([^) ]+)\)/g;
    const attachments = [];
    const foundAttachments = new Set();
    const attachmentsFileNameDuplicates = findFileNameDuplicates(existingAttachments);
    let resultText = text;
    [...text.matchAll(regex)].forEach((match, i) => {
      const url = match.length === 3 && match[2];
      if (url && url.includes('/attachments/token/')) {
        let fileName = getFileNameFromUrl(url);
        if (attachmentsFileNameDuplicates.has(fileName)) {
          const attachmentToUpdate = existingAttachments.find(att => att.content_url === url);
          if (attachmentToUpdate) {
            fileName = appendIndex(fileName, i);
            attachmentToUpdate.file_name = fileName;
          } else {
            console.debug('Can not find attachment by content url: ' + url);
          }
        } else if (!foundAttachments.has(fileName)) {
          foundAttachments.add(fileName);
        } else {
          fileName = appendIndex(fileName, i);
        }
        resultText = resultText.replaceAll(match[0], `![](${fileName})`);
        if (!existingAttachments.find((it) => it.content_url === url)) {
          attachments.push({
            file_name: fileName,
            content_url: url,
            id: containerId + fileName
          });
        }
      }
    });
    resultText = insertLinksIntoMarkdown(resultText, htmlText);
    return {
      description: resultText,
      imageAttachments: attachments
    };
  };


  const newZendeskComment = (agreement) => {
    return (comment) => {
      const {description, imageAttachments} = processImageAttachments(comment.id + '', comment.body.trim(), comment.html_body.trim(), comment.attachments || []);
      const author = getUser(agreement, comment.author_id);
      return {
        id: comment.id + '',
        text: description,
        author: author,
        attachments: comment.attachments && (comment.attachments.concat(imageAttachments)).map(zendeskAttachmentsConverter(agreement, comment)),
        created: comment.created_at,
        defaultVisibility: !comment.public
      };
    };
  };
  const convertTags = (tags) => {
    return tags.map(function (label) {
      return {
        name: label,
        type: 'tag',
        visibleToGroups: [zendeskStaffGroup.name],
        usableByGroups: [zendeskStaffGroup.name]
      };
    });
  };

  function getForm(ticket) {
    let form = forms[ticket.ticket_form_id];
    if (!form) {
      form = api.GET(`ticket_forms/${ticket.ticket_form_id}.json`).ticket_form;
      forms[ticket.ticket_form_id] = form;
    }
    return form;
  }

  const getTicketFields = (ticket) => {
    const fields = getCustomFields();
    let customFields = ticket.custom_fields;
    if (ticket.ticket_form_id) {
      let form = getForm(ticket);
      customFields = customFields.filter(field => form.ticket_field_ids.indexOf(field.id) >= 0);
    }

    return customFields.map(ticketField => {
      const fieldMeta = fields.find(it => it.id === ticketField.id);
      if (!fieldMeta) {
        console.warn('Unknown ticket field: ' + JSON.stringify(ticketField));
        return null;
      }
      if (fieldMeta.custom_field_options) {
        const findValueName = function (value) {
          const option = fieldMeta.custom_field_options.find(it => it.value === value);
          return option ? option.name : null;
        };

        const multiValue = fieldMeta.type === 'multiselect';
        if (multiValue) {
          const convertedValues = (ticketField.value || []).map(singleValue => {
            return {
              type: 'enum',
              multiValue: true,
              value: findValueName(singleValue),
              id: singleValue
            };
          });

          return {
            id: fieldMeta.id,
            type: 'enum',
            title: fieldMeta.title,
            multiValue: true,
            value: convertedValues ? convertedValues : null
          };
        }

        return {
          id: fieldMeta.id,
          title: fieldMeta.title,
          type: 'enum',
          value: {
            value: findValueName(ticketField.value),
            type: 'enum',
            id: ticketField.value
          }
        };
      } else if (fieldMeta.type === 'checkbox') {
        const converted = convertValue(fieldMeta.type, ticketField.value);
        return {
          id: fieldMeta.id,
          title: fieldMeta.title,
          type: 'enum',
          value: {
            value: converted,
            type: 'enum',
            id: converted
          }
        };
      }
      const type = typeMapping[fieldMeta.type];
      if (!type) {
        console.warn('Skipping field because of unknown type: ' + JSON.stringify(fieldMeta));
        return null;
      }
      return {
        id: fieldMeta.id,
        title: fieldMeta.title,
        type: type,
        value: convertValue(fieldMeta.type, ticketField.value)
      };
    }).filter(ticketField => {
      return ticketField && ignoredTicketFields.indexOf(ticketField.title) < 0;
    });
  };

  const createVisibilityGroups = (agreement) => {
    const name = agreement.defaultVisibilityGroup;
    const defaultGroup = name && name.length && { id: name, name: name };
    return defaultGroup ? [defaultGroup, zendeskStaffGroup] : [zendeskStaffGroup];
  };

  const ticket2issue = (agreement, {id: brandId}) => {
    return (ticket) => {
      //getting additional info for proper user creation
      const author = getUser(agreement, ticket.requester_id);
      const attachmentComment = ticket.comments[0]; // here goes description with ticket attachments
      const ticketComments = ticket.comments.splice(1);
      const ticketAttachments = ((attachmentComment || {}).attachments || []);
      const {description, imageAttachments} = processImageAttachments(ticket.id + '', attachmentComment.body, attachmentComment.html_body, ticketAttachments);
      const unauthorized = ((attachmentComment.metadata || {}).flags || []).indexOf(3) >= 0;
      const attachments = ticketAttachments.concat(imageAttachments);
      const ticketFields = {
        project: {
          id: brandId,
          type: 'project',
          fields: [],
          teamGroups: [zendeskStaffGroup]
        },
        summary: {
          type: 'string',
          value: ticket.subject ? ticket.subject : 'Empty subject'
        },
        description: {
          type: 'text',
          value: description
        },
        Type: {
          type: 'enum',
          name: ticket.type
        },
        created: ticket.created_at,
        updated: ticket.updated_at,
        Priority: {
          type: 'enum',
          name: ticket.priority
        },
        Assignee: ticket.assignee_id && getUser(agreement, ticket.assignee_id),
        author: author,
        attachments: attachments.map(zendeskAttachmentsConverter(agreement, attachmentComment)),
        comments: ticketComments.map(newZendeskComment(agreement)),
        links: agreement.addLinkedTicket && ticket.problem_id ? [{
          linkName: 'relates to',
          target: ticket.problem_id + ''
        }] : undefined,
        tags: agreement.syncTags ? convertTags(ticket.tags || []) : [],
        visibleToGroups: createVisibilityGroups(agreement),
        visibleToUsers: (ticket.email_cc_ids || []).concat(ticket.follower_ids || []).map(it => getUser(agreement, it)),
        unauthenticatedReporter: unauthorized && { value: unauthorized.toString() }
      };
      ticketFields[agreement.statusFieldName] = {
        type: agreement.statusFieldName === 'State' ? 'state' : 'enum',
        name: ticket.status,
        isResolved: ticket.status === 'solved' || ticket.status === 'closed'
      };
      if (ticket.due_at) {
        ticketFields['Due Date'] = {
          type: 'date',
          value: ticket.due_at
        };
      }
      if (agreement.syncCustomFields) {
        const allFields = getTicketFields(ticket);
        allFields.forEach(field => {
          if (!ticketFields[field.id]) {
            ticketFields[field.id] = field.value;
            ticketFields.project.fields.push({
              type: field.type,
              multiValue: field.multiValue,
              id: '' + field.id,
              isPrivate: true,
              name: field.title === 'Status' ? agreement.statusFieldName : field.title
            });
          }
        });
        if (ticket.ticket_form_id) {
          const formName = (getForm(ticket) || {}).name;
          if (formName) {
            ticketFields['Form'] = {
              type: 'enum',
              name: formName
            }
          }
        }
      }
      return {
        id: ticket.id,
        fields: Object.assign({}, ticketFields)
      };
    };
  };

  const getTicketsReverseWithSettings = function (agreement, brand, before, top) {
    const brandId = brand.id;
    let searchQuery = `type:ticket brand:${brandId}`;
    if (agreement.additionalFilter) {
      searchQuery += ` ${agreement.additionalFilter}`;
    }
    if (agreement.unresolved) {
      searchQuery += ' status<solved';
    }

    const createdBefore = agreement.createdBefore;
    let createdBeforeParam;
    if (before && before.id) {
      const ticket = api.GET(`/tickets/${before.id}.json`).ticket;
      createdBeforeParam = ticket.created_at;
      searchQuery += ` created<${createdBeforeParam}`;
    } else if (createdBefore) {
      const fixedPattern = 'yyyy-MM-dd\'T\'HH:mm:ss';
      createdBeforeParam = dateTime.format(createdBefore, fixedPattern, UTC) + 'Z';
      searchQuery += ` created<${createdBeforeParam}`;
    }

    const createdAfter = agreement.createdAfter;
    let timeFilterMessage = '';
    if (createdAfter) {
      const fixedPattern = 'yyyy-MM-dd\'T\'HH:mm:ss';
      const createdAfterParam = dateTime.format(createdAfter, fixedPattern, UTC) + 'Z';
      searchQuery += ` created>${createdAfterParam}`;
      timeFilterMessage += ` created in ${createdAfterParam}..${createdBeforeParam}`;
    } else {
      timeFilterMessage += ` created before ${createdBeforeParam}`;
    }

    const queryParams = {
      'query': searchQuery,
      'per_page': top.toString(),
      'sort_by': 'created_at',
      'sort_order': 'desc'
    };
    console.log('Getting tickets: ' + JSON.stringify(queryParams));
    const tickets = api.GET('/search.json', queryParams).results || [];
    const ticketsWithComments = tickets.map(withComments);
    console.log('Loaded ' + tickets.length + ' tickets' + timeFilterMessage + ' for ' + brand.name);
    return ticketsWithComments.map(ticket2issue(agreement, brand));
  };

  /**
     * @param {Agreement} agreement settings
     * @param brand brand
     * @param after information about last imported ticket
     * @param updatedAfter tim
     * @param top
     * @returns all zendesk tickets
     */
  const getTicketsUpdatesWithSettings = function (agreement, brand, after, updatedAfter, top) {
    let tickets = [];
    let page = 1;
    const brandId = brand.id;
    //nullifying offset for next project
    if (currentProject !== brandId) {
      if (currentProject !== 0) {
        page = 1;
      }
      currentProject = brandId;
    }

    let searchQuery = `${agreement.additionalFilter || ''} type:ticket brand:${brandId}`;
    if (updatedAfter) {
      const fixedPattern = 'yyyy-MM-dd\'T\'HH:mm:ss';
      const since = dateTime.parse(updatedAfter.substring(0, updatedAfter.length - 1), fixedPattern, UTC);

      // zendesk require some time to index
      // said that few minutes is enough
      const fixedSince = dateTime.format(since - SEARCH_DELAY, fixedPattern, UTC) + 'Z';
      searchQuery += ` updated>${fixedSince}`;
    }
    if (after && after.id) {
      let ticket = null;
      try {
        ticket = api.GET(`/tickets/${after.id}.json`).ticket;
      } catch (e) {
        console.error('Failed to load ticket "' + after.id + '"');
      }
      if (ticket && ticket.created_at) {
        searchQuery += ` created>${ticket.created_at}`;
      }
    }

    let tempTickets = [];

    do {
      const queryParams = {
        'query': searchQuery,
        'per_page': top.toString(),
        'page': page + '',
        'sort_by': 'created_at'
      };

      tempTickets = api.GET('/search.json', queryParams).results || [];
      console.log('Loaded ticket page: ' + JSON.stringify(queryParams) + ' -> ' + tempTickets.length);
      tempTickets.forEach(ticket => {
        if (after && after.id) {
          if (ticket.id > parseInt(after.id)) {
            tickets.push(ticket);
          }
        } else {
          tickets.push(ticket);
        }
      });
      page += 1;
    } while (tickets.length < top && tempTickets.length);
    const batchParams = {
      'query': searchQuery,
      'afterId': (after && after.id) || 'none'
    };
    console.log('Loaded ticket batch: ' + JSON.stringify(batchParams) + ' -> ' + tickets.length);
    console.log('Requesting comments for ticket batch...');
    tickets = tickets.map(withComments);
    console.log('Processing comments for ticket batch...');
    return tickets.map(ticket2issue(agreement, brand));
  };
  const getUsers = (group, skip, top) => {
    if (group.name !== zendeskStaffGroup.name) {
      return [];
    }
    return Object.values(users)
        .filter(it => it.userType !== YT_USER_TYPES.REPORTER)
        .slice(skip, skip + top);
  };

  Object.assign(common, {
    getProjects: getBrands.bind(this), // api
    getCustomFields: getCustomFields.bind(this), // api
    getTicketFields: getTicketFields.bind(this), // api
    getUser: getUser.bind(this), // common

    getLinkTypes: () => [],
    getServerInfo: getServerInfo.bind(this), // api
    getAttachmentContent: getAttachmentContent.bind(this),
    getTicketsReverseWithSettings: getTicketsReverseWithSettings.bind(this),
    getTicketsUpdatesWithSettings: getTicketsUpdatesWithSettings.bind(this),
    getUsers: getUsers.bind(this),
    prepareToImport: prepareToImport.bind(this),
    fieldName: fieldName.bind(this),
    zendeskStaffGroup: zendeskStaffGroup,

    getTimestampFormats: getTimestampFormats.bind(this), // api
    getUserTimeZoneId: function () {
      return UTC;
    },
    getTimeIntervalDelay: function () {
      return SEARCH_DELAY;
    }
  });
  return common;

};
exports.ZendeskCommon = ZendeskCommon;
