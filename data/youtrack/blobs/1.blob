Fƒ/**
 * Copyright JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Contains definitions for objects and classes that exchange and transfer data over HTTP. The main class is {@link Connection}.
 *
 * @module @jetbrains/youtrack-scripting-api/http
 */

/**
 * @typedef REQUEST_TYPES
 *
 * @classdesc A collection of supported HTTP request types. Note that instead of passing a proper
 * request type to the {@link Connection}.doSync method, there are dedicated methods that correspond to each
 * request type that you can call directly. For example, getSync or postSync.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods|HTTP request methods on MDN}
 *
 * @type {object}
 */
const REQUEST_TYPES = {
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Requests data from the target resource.
   */
  GET: 'GET',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Same as GET, but the response only contains headers and no data.
   */
  HEAD: 'HEAD',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Submits data to the target resource.
   */
  POST: 'POST',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Replaces all current representations of the target resource.
   */
  PUT: 'PUT',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Applies partial modifications to the target resource.
   */
  PATCH: 'PATCH',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Deletes the target resource.
   */
  DELETE: 'DELETE',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Establishes a tunnel to the server identified by the target resource.
   */
  CONNECT: 'CONNECT',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Describes the communication options for the target resource.
   */
  OPTIONS: 'OPTIONS'
};

/**
 * @typedef {Object} Connection
 *
 * @classdesc Main class that is used to establish a connection and send requests to target sites.
 *
 * @property {string} [url] The URL of the target site for the connection.
 * Can be empty, as you can specify the URI as a parameter for any request method.
 * @property {Array<{name: String, value: String}>} [headers] A list of headers.
 *
 * @example
 * // Gets the content of a PasteBin paste, assuming that we have received its key (`pasteBinKey`) in a prior request.
 * const connection = new http.Connection('http://pastebin.com/raw/');
 * connection.addHeader({name: 'Content-Type', value: 'text/plain'});
 * const response = connection.getSync(pasteBinKey, '');
 * if (response && response.code === 200) {
 *   let text = '';
 *   response.headers.forEach(function(header) {
 *     text += header.name + ': ' + header.value + '\n';
 *   });
 *   text += '\n' + response.response;
 *   issue.addComment(text);
 * }
 */

/**
 * Creates an object that lets you establish a connection with a target site.
 * @param {string} [url] The URL of the target site for the connection.
 * Can be empty, as you can specify the URI as a parameter for any request method.
 * @param {string} [sslKeyName] Optional name of the SSL key that is used to establish a secure connection. If you don't want to specify this parameter, pass 'null'.
 * @param {int} [timeout] Optional parameter that specifies the read timeout for outgoing HTTP requests in milliseconds.
 * @constructor Connection
 *
 * @see doSync
 */
const Connection = function (url, sslKeyName, timeout) {
  Object.defineProperty(this, 'url', {value: url});
  const ClientFactory = Java.type('jetbrains.youtrack.scripts.http.ClientFactory');
  Object.defineProperty(this, 'httpClient', {value: ClientFactory.getHttpClient(sslKeyName, timeout)});
  Object.defineProperty(this, 'headers', {value: []});
};

/**
 * Adds a new header to the current connection.
 * @param {Object|string} header A header object with the structure {name: string, value: string}.
 * If the value parameter is specified separately, the provided string is used as the name of the header.
 * @param {string} [value] The value that is assigned to the header.
 * Only considered when the first parameter is specified as a string.
 * @returns {Connection} The current connection object.
 */
Connection.prototype.addHeader = function (header, value) {
  if (typeof header === 'string') {
    header = {name: header, value: value};
  }
  this.headers.push(header);
  return this;
};

/**
 * Sets a header to the current connection. If such header already exists, its value is updated.
 * @param {Object|string} header A header object with the structure {name: string, value: string}.
 * If the value parameter is specified separately, the provided string is used as the name of the header.
 * @param {string} [value] The value that is assigned to the header.
 * Only considered when the first parameter is specified as a string.
 * @returns {Connection} The current connection object.
 */
Connection.prototype.setHeader = function (header, value) {
  const headerName = typeof header === 'string' ? header : header.name;
  const existing = this.headers.find(it => it.name === headerName);
  if (existing) {
    existing.value = value;
  } else {
    return this.addHeader(header, value);
  }
  return this;
};

/**
 * Adds an authorization header with the value returned by the Base64.encode(login + ':' + password) function.
 * @param {String} login The login to use for the authorization request.
 * @param {String} password The password to use for the authorization request..
 * @returns {Connection} The current connection object.
 */
Connection.prototype.basicAuth = function (login, password) {
  const Base64 = Java.type('jetbrains.youtrack.scripts.sandbox.Base64');
  this.addHeader({name: 'Authorization', value: 'Basic ' + Base64.encode(login + ':' + password)});
  return this;
};

/**
 * @typedef {Object} Response
 *
 * @classdesc A class that creates a definition for an HTTP response.
 * If an exception occurs during processing, most of the properties in the response object are empty.
 *
 * @property {string} [response] The response body. If an exception occurs during processing, the response body is empty (null).
 *
 * @property {Object} [responseAsStream] A byte stream representation of the response body.
 * If an exception occurs during processing, the property is empty (null).
 *
 * @property {Array<{name: String, value: String}>} [headers] A collection of response headers.
 * If an exception occurs during processing, the collection is empty.
 *
 * @property {number} [code] The HTTP status code that is assigned to the response.
 * If an exception occurs during processing, the property is empty.
 *
 * @property {Object} [exception] The exception that occurred during processing.
 *
 * @property {boolean} [isSuccess] An indication of the success or failure for the request.
 * If the HTTP status code is between 200 (inclusive) and 400 (exclusive), this property is set to 'true'.
 *
 * @example
 * // Gets the content of a PasteBin paste, assuming that we have received its key (`pasteBinKey`) in a prior request.
 * const http = require('@jetbrains/youtrack-scripting-api/http');
 * const connection = new http.Connection('http://pastebin.com/raw/');
 * connection.addHeader({name: 'Content-Type', value: 'text/plain'});
 * const response = connection.getSync(pasteBinKey, '');
 * if (response && response.code === 200) {
 *   let text = '';
 *   response.headers.forEach(function(header) {
 *     text += header.name + ': ' + header.value + '\n';
 *   });
 *   text += '\n' + response.response;
 *   issue.addComment(text);
 * }
 */

/**
 * Sends a synchronous HTTP request. Note that instead of passing a proper
 * request type with this method, there are dedicated methods that correspond to each
 * request type that you can call directly. For example, getSync or postSync.
 *
 * @param {string} requestType A valid HTTP request type. For a list of supported request types, see {@link REQUEST_TYPES}.
 *
 * @param {string} [uri] A relative URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>} [queryParams] The query parameters.
 *
 * @param {string|Array|Object} [payload] The payload to be sent in the request.
 *
 * @return {Response} An object that represents the HTTP response.
 */
Connection.prototype.doSync = function (requestType, uri, queryParams, payload) {
  if (queryParams && !Array.isArray(queryParams) && (typeof queryParams !== 'object')) {
    throw 'queryParams should be an array of objects {name: \'paramName\', value: \'paramValue\'} or an object. In the later case keys are treated as parameters names';
  }
  if (queryParams && !Array.isArray(queryParams) && (typeof queryParams === 'object')) {
    const qp = [];
    Object.keys(queryParams).forEach(function (key) {
      const value = queryParams[key];
      if (typeof value === 'string') {
        qp.push({name: key, value: value});
      } else if (Array.isArray(value)) {
        value.forEach(function (singleValue) {
          qp.push({name: key, value: singleValue});
        });
      } else if (!value) {
        qp.push({name: key, value: 'null'});
      } else {
        throw 'Can not correctly handle ' + key + ' query parameter. It should be either a string for a single value, or an array for multiple values';
      }
    });
    queryParams = qp;
  }
  queryParams = queryParams || [];
  console.trace('Initiated a connection. Base url: ' + this.url + ', uri: ' + uri);

  const request = this.httpClient.request(requestType, this.url, uri);
  queryParams.forEach(function (p) {
    request.addParameter(p.name, p.value);
  });
  var isJson = true;
  this.headers.forEach(function (elem) {
    if (elem.name === 'Content-Type' && !elem.value.startsWith('application/json')) {
      isJson = false
    }
    request.addHeader(elem.name, elem.value);
  });
  if (payload) {
    if (typeof payload === 'string' || Array.isArray(payload)) {
      request.setPayload(payload);
    } else if (payload.type === 'multipart/form-data' && payload.parts && payload.parts.length && Object.keys(payload).length === 2) {
      request.setPayload(payload);
    } else if (!isJson) {
      request.setPayload(payload);
    } else {
      request.setPayload(JSON.stringify(payload));
    }
  }
  const res = request.go();
  const responsePropertyDescriptors = {};
  ['response', 'responseAsStream', 'headers', 'code', 'exception'].forEach((name) => {
    responsePropertyDescriptors[name] = {
      get: () => {
        const getterName = 'get' + name.charAt(0).toUpperCase() + name.slice(1);
        const getter = res[getterName];
        return getter && getter();
      }
    };
  });
  responsePropertyDescriptors.isSuccess = {
    get: () => res.isSuccess()
  };
  responsePropertyDescriptors.toString = {
    value: () => res.toString()
  };
  responsePropertyDescriptors.$$raw = {
    enumerable: false,
    get: () => res
  };
  return Object.defineProperties({}, responsePropertyDescriptors);
};

/**
 * Executes a synchronous GET request.
 *
 * @param {String} [uri] The request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.getSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.GET, uri, queryParams);
};


/**
 * Executes a synchronous HEAD request.
 *
 * @param {string} [uri] The request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.headSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.HEAD, uri, queryParams);
};

/**
 * Executes a synchronous POST request.
 *
 * @param {string} [uri] The request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 * If the payload parameter is empty, the query parameters are passed as a form entity.
 *
 * @param {string} [payload] The payload to be sent in the request.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.postSync = function (uri, queryParams, payload) {
  return this.doSync(REQUEST_TYPES.POST, uri, queryParams, payload);
};

/**
 * Executes a synchronous PUT request.
 *
 * @param {string} [uri] The request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 * If the payload parameter is empty, the query parameters are passed as a form entity.
 *
 * @param {string} [payload] The payload to be sent in the request.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.putSync = function (uri, queryParams, payload) {
  return this.doSync(REQUEST_TYPES.PUT, uri, queryParams, payload);
};

/**
 * Executes a synchronous PATCH request.
 *
 * @param {string} [uri] The request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 *
 * @param {string} [payload] The payload to be sent in the request.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.patchSync = function (uri, queryParams, payload) {
  return this.doSync(REQUEST_TYPES.PATCH, uri, queryParams, payload);
};

/**
 * Executes a synchronous DELETE request.
 *
 * @param {string} [uri] The request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.deleteSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.DELETE, uri, queryParams);
};

/**
 * Executes a synchronous CONNECT request.
 *
 * @param {string} [uri] request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.connectSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.CONNECT, uri, queryParams);
};

/**
 * Executes a synchronous OPTIONS request.
 *
 * @param {string} [uri] request URI.
 * The complete URL is a concatenation of the string that is passed to the URL parameter in the Connection constructor and this string.
 * If the URL parameter in the Connection constructor is empty, specify the absolute URL of the target site.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] The query parameters.
 * If an object is passed, its keys are considered to be parameter names.
 *
 * @return {Response} An object that represents an HTTP response.
 */
Connection.prototype.optionsSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.OPTIONS, uri, queryParams);
};

exports.Connection = Connection;
exports.REQUEST_TYPES = REQUEST_TYPES;
