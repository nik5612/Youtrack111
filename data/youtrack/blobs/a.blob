;þ/**
 * Copyright JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const jiraUtils = require('./utils');

const fieldIdsMapping = {
  'Link': 'links',
  'Parent': 'links',
  'Epic Link': 'links',
  'Epic Child': 'links'
};

const fieldAliases = {
  'Fix Version': 'fixVersions',
  'Link': 'issuelinks',
  'Parent': 'parent'
};

const toNonEmptyStr = value => {
  if (value === undefined || value === null) {return null;}
  const valueStr = '' + value;
  return valueStr ? valueStr : null;
};

const createChange = function (from, to, modify) {
  return {
    from: modify ? modify(toNonEmptyStr(from)) : toNonEmptyStr(from),
    to: modify ? modify(toNonEmptyStr(to)) : toNonEmptyStr(to)
  };
};

const extractFromId = modify => change => createChange(change.from, change.to, modify);

const extractFromString = modify => change => createChange(change.fromString, change.toString, modify);

const toArray = object => object ? [object] : [];

const wrapToArray = modifyArray => value => {
  const array = toArray(value);
  return modifyArray ? modifyArray(array) : array;
};

const splitToArrayBy = (separator, modify) => s => {
  if (!s) {
    return [];
  }

  separator = separator || ',';
  const array = s.split(separator)
    .filter(str => str && str.length > 0)
    .map(str => str.trim());
  return modify ? modify(array) : array;
};

const splitToArray = modifyArray => s => {
  return splitToArrayBy(',', modifyArray)(s);
};

const stripBracketsOrNone = modify => s => {
  let stripped;
  if (s) {
    const withBrackets = s.startsWith('[');
    stripped = withBrackets ? s.slice(1, -1) : s;
  } else {
    stripped = s;
  }
  return modify ? modify(stripped) : stripped;
};

const Events = function (client, ctxAccess) {

  const treatAsNameObjects = modifyArray => values => {
    const namedValues = values.map(value => ({name: value}));
    return modifyArray ? modifyArray(namedValues) : namedValues;
  };

  const treatAsUsers = modifyArray => values => {
    const isCloud = ctxAccess.getObject('isCloud');
    const users = values.map(value => ((isCloud) ? {accountId: value} : {name: value}));
    return modifyArray ? modifyArray(users) : users;
  };

  const attachProjectField = function (jiraIssue, prototype) {
    if (prototype && prototype.id && prototype.name && prototype.type) {
      const issueHandler = client.$private.issueHandler;
      if (issueHandler.projectFieldTypesToIgnore.indexOf(prototype.type) !== -1) {
        return;
      }
      const projectFields = jiraIssue.fields.project.fields;
      if (projectFields && !projectFields.find(it => it.id === prototype.id)) {
        projectFields.push({
          id: prototype.id,
          name: prototype.name,
          type: prototype.type
        });
      }
    }
  };

  const attachEvent = function (jiraIssue, eventId, fieldId, author, timestamp, removed, added) {
    const transformedAuthor = client.$private.fields.user(author); // there's an array returned
    const event = {
      id: eventId,
      fieldId: fieldId,
      author: transformedAuthor && transformedAuthor[0],
      timestamp: timestamp
    };
    event.fieldChanges = {};
    event.fieldChanges[fieldId] = {
      removedValues: removed,
      addedValues: added
    };
    jiraIssue.history.push(event);
    return event;
  };

  const getSchema = () => {
    return ctxAccess.getObject('fieldSchema');
  };

  const requestIssue = issueKey => {
    const targetIssue = issueKey && client.getIssue(issueKey,
      client.getSkippingFailureHandler([403, 404]), true
    );
    if (!targetIssue || !targetIssue.id) {
      throw ('Cannot retrieve linked issue id by key ' + issueKey);
    }
    return targetIssue;
  };

  const createLink = (targetIssue, linkName) => {
    if (!targetIssue || !linkName) {return null;}
    return {
      linkName: linkName,
      target: {
        id: targetIssue.id,
        key: targetIssue.key
      }
    };
  };

  const extractFromLink = modify => change => {
    const toIssueLink = (targetIssueKey, linkDescription) => {
      if (!targetIssueKey || !linkDescription) {return null;}
      const prefix = 'This issue ';
      const suffix = ' ' + targetIssueKey;
      const linkName = linkDescription
        && linkDescription.startsWith(prefix)
        && linkDescription.endsWith(suffix)
        && linkDescription.substring(prefix.length, linkDescription.length - suffix.length);
      if (!linkName) {
        throw ('Cannot parse link name from the link description: ' + linkDescription);
      }
      const targetIssue = requestIssue(targetIssueKey);

      return createLink(targetIssue, linkName);
    };
    try {
      return {
        from: modify(toIssueLink(change.from, change.fromString)),
        to: modify(toIssueLink(change.to, change.toString))
      };
    } catch (e) {
      return {error: e};
    }
  };

  const createMiniIssue = (id, key) => id && {id: id, key: key};

  const extractFromParent = modify => change => {
    return {
      from: modify(createMiniIssue(change.from, change.fromString)),
      to: modify(createMiniIssue(change.to, change.toString))
    };
  };

  const extractFromEpicLink = modify => change => {
    return {
      from: modify(createLink(createMiniIssue(change.from, change.fromString), 'subtask of')),
      to: modify(createLink(createMiniIssue(change.to, change.toString), 'subtask of'))
    };
  };

  const extractFromEpicChild = modify => change => {
    return {
      from: modify(createLink(createMiniIssue(change.from, change.fromString), 'parent for')),
      to: modify(createLink(createMiniIssue(change.to, change.toString), 'parent for'))
    };
  };

  const ignore = what => () => ({error: what + 'is ignored'});

  const findFieldConverter = (type) => {
    const convert = type && client.$private.fields[type];
    if (!convert) {
      throw 'Cannot find field converter for <' + type + '>';
    }
    return {
      id: type,
      convert: convert
    };
  };

  const convertArrayBy = type => value => findFieldConverter(type).convert(value);

  const perFieldNameTransformers = {
    'Parent': extractFromParent(wrapToArray(convertArrayBy('parent'))),
    'Link': extractFromLink(wrapToArray()),
    'Epic Link': extractFromEpicLink(wrapToArray()),
    'Epic Child': extractFromEpicChild(wrapToArray())
  };

  const perFieldNameConflictDetector = {
    'Epic Link': {
      'findConflict': (jiraFieldId, change) => {
        if (change.items.some(item => item.field === 'Parent')) {
          return '`Parent` event is presented in change and overrides this event';
        }
      }
    }
  };

  const perFieldIdTransformers = {
    'reporter': ignore('field=reporter'),
    'tags': extractFromString(splitToArrayBy(' ', convertArrayBy('tags'))),
    'resolved': extractFromString(wrapToArray()),
    'summary': extractFromString(),
    'description': extractFromString()
  };

  const wrapToObjectsArray = type => value => {
    if (value === undefined || value === null) {return [];}
    const strValue = '' + value;
    return strValue ? [{type: type, value: '' + strValue}] : [];
  };

  const perTypeTransformers = {
    'any': ignore('type=any'),
    //simple types
    'string': extractFromString(wrapToObjectsArray('string')),
    'text': extractFromString(wrapToObjectsArray('text')),
    'number': extractFromString(wrapToObjectsArray('float')),
    'integer': extractFromString(wrapToObjectsArray('integer')),
    'float': extractFromString(wrapToObjectsArray('float')),
    'datetime': extractFromString(wrapToObjectsArray('datetime')),
    'date': extractFromString(wrapToObjectsArray('date')),
    'period': extractFromId(wrapToArray(convertArrayBy('period'))),
    //complex types
    'user': extractFromId(wrapToArray(treatAsUsers(convertArrayBy('user')))),
    'user[*]': extractFromId(stripBracketsOrNone(splitToArray(treatAsUsers(convertArrayBy('user'))))),
    'group': extractFromString(stripBracketsOrNone(wrapToArray(treatAsNameObjects(convertArrayBy('group'))))),
    'group[*]': extractFromString(stripBracketsOrNone(splitToArray(treatAsNameObjects(convertArrayBy('group'))))),
    'enum': extractFromString(wrapToArray(treatAsNameObjects(convertArrayBy('enum')))),
    'enum[*]': extractFromString(splitToArray(treatAsNameObjects(convertArrayBy('enum')))),
    'ownedField': extractFromString(wrapToArray(treatAsNameObjects(convertArrayBy('ownedField')))),
    'ownedField[*]': extractFromString(splitToArray(treatAsNameObjects(convertArrayBy('ownedField')))),
    'version': extractFromString(wrapToArray(treatAsNameObjects(convertArrayBy('version')))),
    'version[*]': extractFromString(splitToArray(treatAsNameObjects(convertArrayBy('version')))),
    'state': extractFromString(wrapToArray(treatAsNameObjects(convertArrayBy('state')))),
    //custom types
    'resolution': extractFromString(wrapToArray(treatAsNameObjects(convertArrayBy('resolution')))),
    //gh-epic-link is covered by 'Epic Link' and 'Epic Child' field transformers
    'com.pyxis.greenhopper.jira:gh-epic-link': ignore('com.pyxis.greenhopper.jira:gh-epic-link')
  };

  const addResolutionEvents = jiraIssue => {
    let resolvedTimestamp = null;
    jiraIssue.history.forEach(event => {
      const eventFieldId = event.fieldId;
      if (eventFieldId === 'resolution') {
        const change = event.fieldChanges[eventFieldId];
        const from = change.removedValues.length ? resolvedTimestamp : null;
        const to = change.addedValues.length ? event.timestamp : null;
        const eventId = event.id + '-r';
        const eventInfo = jiraIssue.key + ':' + eventId + ':resolved';
        if (from === null && to === null) {
          console.debug(eventInfo + ': skipped event -X null to null change');
        } else {
          attachEvent(jiraIssue, eventId, 'resolved', event.author, event.timestamp, toArray(from), toArray(to));
          console.debug(eventInfo + ': added event -> created from Resolution');
        }
        resolvedTimestamp = to;
      }
    });
  };

  const findPerTypeTransformer = (prototype) => {
    let transformer;
    if (prototype) {
      const typeId = prototype.type + (prototype.multiValue ? '[*]' : '');
      const transform = perTypeTransformers[typeId];
      transformer = transform && {
        id: 'field type=' + typeId,
        transform: transform
      };
    }
    return transformer;
  };

  const findPerFieldTransformer = (fieldId) => {
    const transform = perFieldIdTransformers[fieldId];
    return transform && {
      id: 'field id=' + fieldId,
      transform: transform
    };
  };

  const findPerEventFieldIdTransformer = (jiraEventFieldId) => {
    const transform = perFieldNameTransformers[jiraEventFieldId];
    return transform && {
      id: 'event field id=' + jiraEventFieldId,
      transform: transform
    };
  };

  const findTransformer = (jiraFieldId, jiraEventFieldId, prototype) => {
    return findPerEventFieldIdTransformer(jiraEventFieldId)
      || findPerFieldTransformer(jiraFieldId)
      || findPerTypeTransformer(prototype);
  };

  const findConflict = (jiraEventFieldId, change) => {
    const detector = perFieldNameConflictDetector[jiraEventFieldId];
    return detector && detector.findConflict(jiraEventFieldId, change);
  };

  const composeFieldInfo = (jiraEventFieldId, prototype) => {
    const type = prototype && prototype.type;
    const prototypeInfo = prototype ? (prototype.id + '<' + (type ? type : '?') + '>') : '?';
    return jiraEventFieldId + '#' + prototypeInfo;
  };

  function composeEventInfo(jiraIssue, eventFieldInfo, eventId) {
    return jiraIssue.key + ':' + eventId + ':' + eventFieldInfo;
  }

  const transformEvents = (jiraIssue, failureHandler) => {
    if (!jiraIssue.changelog && !jiraIssue.history) { // see JT-37375
      jiraIssue.changelog = client.getIssueChangelog(jiraIssue.key, failureHandler).changelog;
      if (!jiraIssue.changelog) { // still no changelog for some unknown reason
        console.warn(jiraIssue.key + ': No change log is available for issue');
      }
    }
    jiraIssue.changelog && jiraIssue.changelog.histories && jiraIssue.changelog.histories.map(jiraUtils.filterEvents).forEach(change => {
      change.items.forEach((item, index) => {
        const jiraEventFieldId = item.field;
        const jiraFieldId = fieldAliases[jiraEventFieldId] || jiraEventFieldId;
        const prototype = jiraFieldId && getSchema().findField(jiraFieldId, jiraFieldId);
        const eventFieldInfo = composeFieldInfo(jiraEventFieldId, prototype);
        const eventId = change.id + '-' + index;
        const eventInfo = composeEventInfo(jiraIssue, eventFieldInfo, eventId);
        console.debug(eventInfo + ': processing event');
        if (!jiraEventFieldId) {
          console.debug(eventInfo + ': event skipped -X field ' + eventFieldInfo + ' is not in the schema');
          return;
        }

        if (item.from === item.to && item.fromString === item.toString) {
          console.debug(eventInfo + ': event skipped -X empty change, `from` and `to` are identical');
          return;
        }

        const conflict = findConflict(jiraEventFieldId, change);
        if (conflict) {
          console.debug(eventInfo + ': event skipped -X conflict: ' + conflict);
          return;
        }

        const emptyThing = fieldRep => (!fieldRep || (Array.isArray(fieldRep) && fieldRep.length === 0));
        if (!item.fromString && !item.toString && emptyThing(item.from) && emptyThing(item.to)) {
          console.debug(eventInfo + ': event skipped -X empty change, `from` and `to` are empty');
          return;
        }

        const transformer = findTransformer(jiraFieldId, jiraEventFieldId, prototype);
        if (!transformer) {
          console.debug(eventInfo + ': event skipped -X field ' + eventFieldInfo + ' has no transformer');
          return;
        }

        const transformed = transformer.transform(item);
        if (transformed.error) {
          console.debug(eventInfo + ': event skipped -X ' + transformed.error);
          return;
        }

        if (emptyThing(transformed.from) && emptyThing(transformed.to)) {
          console.debug(eventInfo + ': event skipped -X empty change after transformed by ' + transformer.id);
          return;
        }

        const fieldId = fieldIdsMapping[jiraEventFieldId]
          || prototype && prototype.id
          || prototype && prototype.name
          || jiraEventFieldId;
        attachEvent(jiraIssue, eventId, fieldId, change.author, change.created, transformed.from, transformed.to);
        attachProjectField(jiraIssue, prototype);
        console.debug(eventInfo + ': event added -> transformed by ' + transformer.id);
      });
    });

    addResolutionEvents(jiraIssue);
  };

  return {
    transformEvents: transformEvents
  };
};

module.exports = Events;
